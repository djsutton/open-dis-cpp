--- a/cpp/DIS/DeadReckoningParameter.cpp
+++ b/cpp/DIS/DeadReckoningParameter.cpp
@@ -5,10 +5,15 @@ using namespace DIS;
 
 DeadReckoningParameter::DeadReckoningParameter():
    _deadReckoningAlgorithm(0), 
-   _otherParameters(0), 
    _entityLinearAcceleration(), 
    _entityAngularVelocity()
 {
+     // Initialize fixed length array
+     for(int idx = 0; idx < sizeof(_otherParameters); idx++)
+     {
+         _otherParameters[idx] = 0;
+     }
+
 }
 
 DeadReckoningParameter::~DeadReckoningParameter()
@@ -25,14 +30,22 @@ void DeadReckoningParameter::setDeadReckoningAlgorithm(unsigned char pX)
     _deadReckoningAlgorithm = pX;
 }
 
-char DeadReckoningParameter::getOtherParameters() const
+char* DeadReckoningParameter::getOtherParameters() 
+{
+    return _otherParameters;
+}
+
+const char* DeadReckoningParameter::getOtherParameters() const
 {
     return _otherParameters;
 }
 
-void DeadReckoningParameter::setOtherParameters(char pX)
+void DeadReckoningParameter::setOtherParameters(const char* x)
 {
-    _otherParameters = pX;
+   for(int i = 0; i < sizeof(_otherParameters); i++)
+   {
+        _otherParameters[i] = x[i];
+   }
 }
 
 Vector3Float& DeadReckoningParameter::getEntityLinearAcceleration() 
@@ -68,7 +81,12 @@ void DeadReckoningParameter::setEntityAngularVelocity(const Vector3Float &pX)
 void DeadReckoningParameter::marshal(DataStream& dataStream) const
 {
     dataStream << _deadReckoningAlgorithm;
-    dataStream << _otherParameters;
+
+     for(size_t idx = 0; idx < 15; idx++)
+     {
+        dataStream << _otherParameters[idx];
+     }
+
     _entityLinearAcceleration.marshal(dataStream);
     _entityAngularVelocity.marshal(dataStream);
 }
@@ -76,7 +94,12 @@ void DeadReckoningParameter::marshal(DataStream& dataStream) const
 void DeadReckoningParameter::unmarshal(DataStream& dataStream)
 {
     dataStream >> _deadReckoningAlgorithm;
-    dataStream >> _otherParameters;
+
+     for(size_t idx = 0; idx < sizeof(_otherParameters); idx++)
+     {
+        dataStream >> _otherParameters[idx];
+     }
+
     _entityLinearAcceleration.unmarshal(dataStream);
     _entityAngularVelocity.unmarshal(dataStream);
 }
@@ -87,7 +110,12 @@ bool DeadReckoningParameter::operator ==(const DeadReckoningParameter& rhs) cons
      bool ivarsEqual = true;
 
      if( ! (_deadReckoningAlgorithm == rhs._deadReckoningAlgorithm) ) ivarsEqual = false;
-     if( ! (_otherParameters == rhs._otherParameters) ) ivarsEqual = false;
+
+     for(char idx = 0; idx < sizeof(_otherParameters); idx++)
+     {
+          if(!(_otherParameters[idx] == rhs._otherParameters[idx]) ) ivarsEqual = false;
+     }
+
      if( ! (_entityLinearAcceleration == rhs._entityLinearAcceleration) ) ivarsEqual = false;
      if( ! (_entityAngularVelocity == rhs._entityAngularVelocity) ) ivarsEqual = false;
 
@@ -99,7 +127,7 @@ int DeadReckoningParameter::getMarshalledSize() const
    int marshalSize = 0;
 
    marshalSize = marshalSize + 1;  // _deadReckoningAlgorithm
-   marshalSize = marshalSize + 1;  // _otherParameters
+   marshalSize = marshalSize + sizeof(_otherParameters);  // _otherParameters
    marshalSize = marshalSize + _entityLinearAcceleration.getMarshalledSize();  // _entityLinearAcceleration
    marshalSize = marshalSize + _entityAngularVelocity.getMarshalledSize();  // _entityAngularVelocity
     return marshalSize;
